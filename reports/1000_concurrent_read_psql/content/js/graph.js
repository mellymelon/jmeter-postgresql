/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1202.0, "minX": 0.0, "maxY": 23392.0, "series": [{"data": [[0.0, 1202.0], [0.1, 1258.0], [0.2, 1260.0], [0.3, 1260.0], [0.4, 1260.0], [0.5, 1269.0], [0.6, 1279.0], [0.7, 1280.0], [0.8, 1280.0], [0.9, 1285.0], [1.0, 1303.0], [1.1, 1322.0], [1.2, 1334.0], [1.3, 1341.0], [1.4, 1341.0], [1.5, 1348.0], [1.6, 1350.0], [1.7, 1351.0], [1.8, 1351.0], [1.9, 1352.0], [2.0, 1353.0], [2.1, 1355.0], [2.2, 1355.0], [2.3, 1358.0], [2.4, 1359.0], [2.5, 1360.0], [2.6, 1363.0], [2.7, 1365.0], [2.8, 1366.0], [2.9, 1367.0], [3.0, 1369.0], [3.1, 1369.0], [3.2, 1374.0], [3.3, 1376.0], [3.4, 1376.0], [3.5, 1376.0], [3.6, 1378.0], [3.7, 1379.0], [3.8, 1380.0], [3.9, 1383.0], [4.0, 1385.0], [4.1, 1386.0], [4.2, 1388.0], [4.3, 1388.0], [4.4, 1391.0], [4.5, 1391.0], [4.6, 1392.0], [4.7, 1394.0], [4.8, 1394.0], [4.9, 1395.0], [5.0, 1395.0], [5.1, 1397.0], [5.2, 1398.0], [5.3, 1402.0], [5.4, 1402.0], [5.5, 1402.0], [5.6, 1402.0], [5.7, 1403.0], [5.8, 1403.0], [5.9, 1404.0], [6.0, 1404.0], [6.1, 1404.0], [6.2, 1407.0], [6.3, 1410.0], [6.4, 1412.0], [6.5, 1412.0], [6.6, 1412.0], [6.7, 1416.0], [6.8, 1417.0], [6.9, 1418.0], [7.0, 1418.0], [7.1, 1419.0], [7.2, 1419.0], [7.3, 1420.0], [7.4, 1421.0], [7.5, 1422.0], [7.6, 1422.0], [7.7, 1423.0], [7.8, 1423.0], [7.9, 1424.0], [8.0, 1425.0], [8.1, 1425.0], [8.2, 1425.0], [8.3, 1426.0], [8.4, 1428.0], [8.5, 1429.0], [8.6, 1429.0], [8.7, 1430.0], [8.8, 1431.0], [8.9, 1432.0], [9.0, 1433.0], [9.1, 1433.0], [9.2, 1440.0], [9.3, 1442.0], [9.4, 1445.0], [9.5, 1445.0], [9.6, 1446.0], [9.7, 1446.0], [9.8, 1447.0], [9.9, 1447.0], [10.0, 1447.0], [10.1, 1448.0], [10.2, 1449.0], [10.3, 1449.0], [10.4, 1450.0], [10.5, 1452.0], [10.6, 1452.0], [10.7, 1453.0], [10.8, 1453.0], [10.9, 1454.0], [11.0, 1456.0], [11.1, 1456.0], [11.2, 1457.0], [11.3, 1457.0], [11.4, 1457.0], [11.5, 1457.0], [11.6, 1458.0], [11.7, 1458.0], [11.8, 1458.0], [11.9, 1459.0], [12.0, 1459.0], [12.1, 1459.0], [12.2, 1459.0], [12.3, 1460.0], [12.4, 1461.0], [12.5, 1462.0], [12.6, 1462.0], [12.7, 1462.0], [12.8, 1462.0], [12.9, 1463.0], [13.0, 1463.0], [13.1, 1463.0], [13.2, 1463.0], [13.3, 1463.0], [13.4, 1463.0], [13.5, 1465.0], [13.6, 1465.0], [13.7, 1466.0], [13.8, 1466.0], [13.9, 1466.0], [14.0, 1467.0], [14.1, 1467.0], [14.2, 1468.0], [14.3, 1469.0], [14.4, 1469.0], [14.5, 1470.0], [14.6, 1470.0], [14.7, 1471.0], [14.8, 1471.0], [14.9, 1472.0], [15.0, 1472.0], [15.1, 1473.0], [15.2, 1473.0], [15.3, 1473.0], [15.4, 1473.0], [15.5, 1473.0], [15.6, 1473.0], [15.7, 1474.0], [15.8, 1474.0], [15.9, 1474.0], [16.0, 1474.0], [16.1, 1475.0], [16.2, 1476.0], [16.3, 1476.0], [16.4, 1476.0], [16.5, 1476.0], [16.6, 1477.0], [16.7, 1477.0], [16.8, 1478.0], [16.9, 1478.0], [17.0, 1478.0], [17.1, 1478.0], [17.2, 1479.0], [17.3, 1479.0], [17.4, 1479.0], [17.5, 1479.0], [17.6, 1480.0], [17.7, 1480.0], [17.8, 1480.0], [17.9, 1481.0], [18.0, 1481.0], [18.1, 1481.0], [18.2, 1481.0], [18.3, 1482.0], [18.4, 1483.0], [18.5, 1484.0], [18.6, 1484.0], [18.7, 1484.0], [18.8, 1486.0], [18.9, 1486.0], [19.0, 1486.0], [19.1, 1486.0], [19.2, 1487.0], [19.3, 1487.0], [19.4, 1487.0], [19.5, 1487.0], [19.6, 1487.0], [19.7, 1488.0], [19.8, 1488.0], [19.9, 1489.0], [20.0, 1489.0], [20.1, 1489.0], [20.2, 1491.0], [20.3, 1492.0], [20.4, 1492.0], [20.5, 1494.0], [20.6, 1494.0], [20.7, 1495.0], [20.8, 1496.0], [20.9, 1496.0], [21.0, 1497.0], [21.1, 1497.0], [21.2, 1497.0], [21.3, 1498.0], [21.4, 1498.0], [21.5, 1498.0], [21.6, 1500.0], [21.7, 1500.0], [21.8, 1500.0], [21.9, 1501.0], [22.0, 1501.0], [22.1, 1502.0], [22.2, 1505.0], [22.3, 1505.0], [22.4, 1505.0], [22.5, 1505.0], [22.6, 1506.0], [22.7, 1506.0], [22.8, 1506.0], [22.9, 1506.0], [23.0, 1506.0], [23.1, 1507.0], [23.2, 1508.0], [23.3, 1508.0], [23.4, 1508.0], [23.5, 1509.0], [23.6, 1510.0], [23.7, 1510.0], [23.8, 1510.0], [23.9, 1511.0], [24.0, 1511.0], [24.1, 1512.0], [24.2, 1513.0], [24.3, 1513.0], [24.4, 1514.0], [24.5, 1516.0], [24.6, 1516.0], [24.7, 1517.0], [24.8, 1517.0], [24.9, 1519.0], [25.0, 1519.0], [25.1, 1520.0], [25.2, 1520.0], [25.3, 1520.0], [25.4, 1520.0], [25.5, 1521.0], [25.6, 1523.0], [25.7, 1524.0], [25.8, 1524.0], [25.9, 1525.0], [26.0, 1525.0], [26.1, 1526.0], [26.2, 1526.0], [26.3, 1526.0], [26.4, 1526.0], [26.5, 1527.0], [26.6, 1528.0], [26.7, 1528.0], [26.8, 1529.0], [26.9, 1529.0], [27.0, 1530.0], [27.1, 1530.0], [27.2, 1531.0], [27.3, 1531.0], [27.4, 1532.0], [27.5, 1532.0], [27.6, 1533.0], [27.7, 1533.0], [27.8, 1534.0], [27.9, 1534.0], [28.0, 1534.0], [28.1, 1534.0], [28.2, 1535.0], [28.3, 1536.0], [28.4, 1536.0], [28.5, 1536.0], [28.6, 1536.0], [28.7, 1537.0], [28.8, 1538.0], [28.9, 1539.0], [29.0, 1540.0], [29.1, 1542.0], [29.2, 1542.0], [29.3, 1543.0], [29.4, 1545.0], [29.5, 1545.0], [29.6, 1547.0], [29.7, 1547.0], [29.8, 1548.0], [29.9, 1549.0], [30.0, 1550.0], [30.1, 1552.0], [30.2, 1552.0], [30.3, 1553.0], [30.4, 1556.0], [30.5, 1557.0], [30.6, 1559.0], [30.7, 1560.0], [30.8, 1561.0], [30.9, 1561.0], [31.0, 1562.0], [31.1, 1565.0], [31.2, 1567.0], [31.3, 1568.0], [31.4, 1569.0], [31.5, 1570.0], [31.6, 1570.0], [31.7, 1571.0], [31.8, 1571.0], [31.9, 1572.0], [32.0, 1573.0], [32.1, 1574.0], [32.2, 1574.0], [32.3, 1575.0], [32.4, 1576.0], [32.5, 1580.0], [32.6, 1580.0], [32.7, 1581.0], [32.8, 1583.0], [32.9, 1584.0], [33.0, 1584.0], [33.1, 1584.0], [33.2, 1586.0], [33.3, 1586.0], [33.4, 1588.0], [33.5, 1588.0], [33.6, 1591.0], [33.7, 1591.0], [33.8, 1593.0], [33.9, 1593.0], [34.0, 1593.0], [34.1, 1594.0], [34.2, 1594.0], [34.3, 1596.0], [34.4, 1597.0], [34.5, 1597.0], [34.6, 1597.0], [34.7, 1599.0], [34.8, 1600.0], [34.9, 1600.0], [35.0, 1601.0], [35.1, 1601.0], [35.2, 1602.0], [35.3, 1604.0], [35.4, 1604.0], [35.5, 1605.0], [35.6, 1605.0], [35.7, 1606.0], [35.8, 1606.0], [35.9, 1607.0], [36.0, 1607.0], [36.1, 1607.0], [36.2, 1607.0], [36.3, 1608.0], [36.4, 1609.0], [36.5, 1609.0], [36.6, 1610.0], [36.7, 1610.0], [36.8, 1611.0], [36.9, 1611.0], [37.0, 1612.0], [37.1, 1613.0], [37.2, 1613.0], [37.3, 1619.0], [37.4, 1619.0], [37.5, 1620.0], [37.6, 1620.0], [37.7, 1621.0], [37.8, 1621.0], [37.9, 1622.0], [38.0, 1623.0], [38.1, 1623.0], [38.2, 1625.0], [38.3, 1626.0], [38.4, 1626.0], [38.5, 1627.0], [38.6, 1627.0], [38.7, 1629.0], [38.8, 1632.0], [38.9, 1633.0], [39.0, 1634.0], [39.1, 1636.0], [39.2, 1636.0], [39.3, 1639.0], [39.4, 1639.0], [39.5, 1639.0], [39.6, 1641.0], [39.7, 1641.0], [39.8, 1644.0], [39.9, 1650.0], [40.0, 1653.0], [40.1, 1663.0], [40.2, 1664.0], [40.3, 1666.0], [40.4, 1667.0], [40.5, 1673.0], [40.6, 1673.0], [40.7, 1674.0], [40.8, 1675.0], [40.9, 1676.0], [41.0, 1679.0], [41.1, 1679.0], [41.2, 1680.0], [41.3, 1684.0], [41.4, 1684.0], [41.5, 1686.0], [41.6, 1686.0], [41.7, 1688.0], [41.8, 1691.0], [41.9, 1692.0], [42.0, 1698.0], [42.1, 1704.0], [42.2, 1707.0], [42.3, 1707.0], [42.4, 1707.0], [42.5, 1708.0], [42.6, 1711.0], [42.7, 1711.0], [42.8, 1712.0], [42.9, 1716.0], [43.0, 1735.0], [43.1, 1737.0], [43.2, 1739.0], [43.3, 1741.0], [43.4, 1742.0], [43.5, 1743.0], [43.6, 1744.0], [43.7, 1745.0], [43.8, 1746.0], [43.9, 1746.0], [44.0, 1747.0], [44.1, 1749.0], [44.2, 1750.0], [44.3, 1750.0], [44.4, 1750.0], [44.5, 1750.0], [44.6, 1751.0], [44.7, 1751.0], [44.8, 1753.0], [44.9, 1755.0], [45.0, 1755.0], [45.1, 1757.0], [45.2, 1758.0], [45.3, 1759.0], [45.4, 1760.0], [45.5, 1761.0], [45.6, 1762.0], [45.7, 1765.0], [45.8, 1766.0], [45.9, 1768.0], [46.0, 1769.0], [46.1, 1770.0], [46.2, 1771.0], [46.3, 1772.0], [46.4, 1773.0], [46.5, 1773.0], [46.6, 1775.0], [46.7, 1777.0], [46.8, 1777.0], [46.9, 1778.0], [47.0, 1781.0], [47.1, 1790.0], [47.2, 1790.0], [47.3, 1791.0], [47.4, 1793.0], [47.5, 1794.0], [47.6, 1795.0], [47.7, 1800.0], [47.8, 1801.0], [47.9, 1802.0], [48.0, 1802.0], [48.1, 1803.0], [48.2, 1803.0], [48.3, 1803.0], [48.4, 1804.0], [48.5, 1805.0], [48.6, 1807.0], [48.7, 1808.0], [48.8, 1809.0], [48.9, 1812.0], [49.0, 1813.0], [49.1, 1813.0], [49.2, 1816.0], [49.3, 1816.0], [49.4, 1817.0], [49.5, 1821.0], [49.6, 1823.0], [49.7, 1827.0], [49.8, 1828.0], [49.9, 1828.0], [50.0, 1828.0], [50.1, 1833.0], [50.2, 1833.0], [50.3, 1835.0], [50.4, 1835.0], [50.5, 1836.0], [50.6, 1837.0], [50.7, 1837.0], [50.8, 1837.0], [50.9, 1843.0], [51.0, 1846.0], [51.1, 1846.0], [51.2, 1850.0], [51.3, 1850.0], [51.4, 1852.0], [51.5, 1852.0], [51.6, 1852.0], [51.7, 1852.0], [51.8, 1853.0], [51.9, 1854.0], [52.0, 1854.0], [52.1, 1855.0], [52.2, 1858.0], [52.3, 1858.0], [52.4, 1858.0], [52.5, 1860.0], [52.6, 1861.0], [52.7, 1863.0], [52.8, 1863.0], [52.9, 1863.0], [53.0, 1867.0], [53.1, 1867.0], [53.2, 1867.0], [53.3, 1867.0], [53.4, 1869.0], [53.5, 1869.0], [53.6, 1869.0], [53.7, 1870.0], [53.8, 1871.0], [53.9, 1871.0], [54.0, 1872.0], [54.1, 1872.0], [54.2, 1873.0], [54.3, 1874.0], [54.4, 1874.0], [54.5, 1874.0], [54.6, 1875.0], [54.7, 1875.0], [54.8, 1875.0], [54.9, 1876.0], [55.0, 1877.0], [55.1, 1877.0], [55.2, 1877.0], [55.3, 1878.0], [55.4, 1880.0], [55.5, 1881.0], [55.6, 1881.0], [55.7, 1881.0], [55.8, 1882.0], [55.9, 1883.0], [56.0, 1883.0], [56.1, 1884.0], [56.2, 1885.0], [56.3, 1885.0], [56.4, 1887.0], [56.5, 1888.0], [56.6, 1889.0], [56.7, 1890.0], [56.8, 1892.0], [56.9, 1892.0], [57.0, 1893.0], [57.1, 1894.0], [57.2, 1897.0], [57.3, 1898.0], [57.4, 1898.0], [57.5, 1899.0], [57.6, 1900.0], [57.7, 1900.0], [57.8, 1902.0], [57.9, 1902.0], [58.0, 1902.0], [58.1, 1903.0], [58.2, 1904.0], [58.3, 1904.0], [58.4, 1905.0], [58.5, 1907.0], [58.6, 1907.0], [58.7, 1908.0], [58.8, 1908.0], [58.9, 1913.0], [59.0, 1916.0], [59.1, 1917.0], [59.2, 1919.0], [59.3, 1920.0], [59.4, 1920.0], [59.5, 1920.0], [59.6, 1921.0], [59.7, 1921.0], [59.8, 1925.0], [59.9, 1925.0], [60.0, 1925.0], [60.1, 1926.0], [60.2, 1926.0], [60.3, 1927.0], [60.4, 1928.0], [60.5, 1929.0], [60.6, 1929.0], [60.7, 1930.0], [60.8, 1930.0], [60.9, 1931.0], [61.0, 1932.0], [61.1, 1932.0], [61.2, 1932.0], [61.3, 1934.0], [61.4, 1936.0], [61.5, 1938.0], [61.6, 1940.0], [61.7, 1940.0], [61.8, 1942.0], [61.9, 1943.0], [62.0, 1943.0], [62.1, 1944.0], [62.2, 1945.0], [62.3, 1947.0], [62.4, 1950.0], [62.5, 1950.0], [62.6, 1951.0], [62.7, 1951.0], [62.8, 1952.0], [62.9, 1952.0], [63.0, 1953.0], [63.1, 1954.0], [63.2, 1955.0], [63.3, 1955.0], [63.4, 1955.0], [63.5, 1959.0], [63.6, 1960.0], [63.7, 1963.0], [63.8, 1967.0], [63.9, 1969.0], [64.0, 1969.0], [64.1, 1970.0], [64.2, 1974.0], [64.3, 1976.0], [64.4, 1977.0], [64.5, 1983.0], [64.6, 1985.0], [64.7, 1986.0], [64.8, 1987.0], [64.9, 1988.0], [65.0, 1988.0], [65.1, 1993.0], [65.2, 1993.0], [65.3, 1994.0], [65.4, 1997.0], [65.5, 1997.0], [65.6, 1997.0], [65.7, 1998.0], [65.8, 1999.0], [65.9, 2000.0], [66.0, 2001.0], [66.1, 2001.0], [66.2, 2001.0], [66.3, 2001.0], [66.4, 2002.0], [66.5, 2002.0], [66.6, 2003.0], [66.7, 2003.0], [66.8, 2005.0], [66.9, 2005.0], [67.0, 2005.0], [67.1, 2006.0], [67.2, 2006.0], [67.3, 2007.0], [67.4, 2009.0], [67.5, 2010.0], [67.6, 2010.0], [67.7, 2011.0], [67.8, 2015.0], [67.9, 2016.0], [68.0, 2017.0], [68.1, 2017.0], [68.2, 2020.0], [68.3, 2022.0], [68.4, 2024.0], [68.5, 2025.0], [68.6, 2026.0], [68.7, 2026.0], [68.8, 2026.0], [68.9, 2026.0], [69.0, 2027.0], [69.1, 2027.0], [69.2, 2027.0], [69.3, 2028.0], [69.4, 2031.0], [69.5, 2032.0], [69.6, 2032.0], [69.7, 2033.0], [69.8, 2034.0], [69.9, 2035.0], [70.0, 2035.0], [70.1, 2035.0], [70.2, 2035.0], [70.3, 2036.0], [70.4, 2036.0], [70.5, 2036.0], [70.6, 2037.0], [70.7, 2039.0], [70.8, 2043.0], [70.9, 2043.0], [71.0, 2048.0], [71.1, 2050.0], [71.2, 2051.0], [71.3, 2052.0], [71.4, 2052.0], [71.5, 2052.0], [71.6, 2052.0], [71.7, 2053.0], [71.8, 2055.0], [71.9, 2060.0], [72.0, 2064.0], [72.1, 2064.0], [72.2, 2065.0], [72.3, 2066.0], [72.4, 2068.0], [72.5, 2071.0], [72.6, 2072.0], [72.7, 2072.0], [72.8, 2073.0], [72.9, 2073.0], [73.0, 2075.0], [73.1, 2075.0], [73.2, 2075.0], [73.3, 2076.0], [73.4, 2077.0], [73.5, 2077.0], [73.6, 2079.0], [73.7, 2079.0], [73.8, 2079.0], [73.9, 2080.0], [74.0, 2082.0], [74.1, 2083.0], [74.2, 2083.0], [74.3, 2084.0], [74.4, 2086.0], [74.5, 2086.0], [74.6, 2086.0], [74.7, 2087.0], [74.8, 2087.0], [74.9, 2089.0], [75.0, 2091.0], [75.1, 2092.0], [75.2, 2092.0], [75.3, 2093.0], [75.4, 2097.0], [75.5, 2100.0], [75.6, 2102.0], [75.7, 2105.0], [75.8, 2109.0], [75.9, 2111.0], [76.0, 2116.0], [76.1, 2122.0], [76.2, 2123.0], [76.3, 2126.0], [76.4, 2127.0], [76.5, 2129.0], [76.6, 2129.0], [76.7, 2130.0], [76.8, 2130.0], [76.9, 2131.0], [77.0, 2132.0], [77.1, 2134.0], [77.2, 2134.0], [77.3, 2135.0], [77.4, 2136.0], [77.5, 2136.0], [77.6, 2140.0], [77.7, 2143.0], [77.8, 2143.0], [77.9, 2144.0], [78.0, 2144.0], [78.1, 2144.0], [78.2, 2145.0], [78.3, 2145.0], [78.4, 2148.0], [78.5, 2156.0], [78.6, 2157.0], [78.7, 2167.0], [78.8, 2168.0], [78.9, 2170.0], [79.0, 2170.0], [79.1, 2172.0], [79.2, 2179.0], [79.3, 2199.0], [79.4, 2202.0], [79.5, 2202.0], [79.6, 2206.0], [79.7, 2206.0], [79.8, 2210.0], [79.9, 3230.0], [80.0, 3233.0], [80.1, 3277.0], [80.2, 3453.0], [80.3, 3490.0], [80.4, 3496.0], [80.5, 3502.0], [80.6, 3510.0], [80.7, 3517.0], [80.8, 3610.0], [80.9, 3839.0], [81.0, 3843.0], [81.1, 3913.0], [81.2, 4056.0], [81.3, 4148.0], [81.4, 4251.0], [81.5, 4346.0], [81.6, 4440.0], [81.7, 4502.0], [81.8, 4540.0], [81.9, 4573.0], [82.0, 4621.0], [82.1, 4706.0], [82.2, 4732.0], [82.3, 4816.0], [82.4, 4887.0], [82.5, 4942.0], [82.6, 4992.0], [82.7, 5032.0], [82.8, 5059.0], [82.9, 5221.0], [83.0, 5326.0], [83.1, 5362.0], [83.2, 5487.0], [83.3, 5546.0], [83.4, 15259.0], [83.5, 15301.0], [83.6, 15431.0], [83.7, 15443.0], [83.8, 15472.0], [83.9, 15476.0], [84.0, 15638.0], [84.1, 15713.0], [84.2, 15727.0], [84.3, 15743.0], [84.4, 15744.0], [84.5, 15756.0], [84.6, 15774.0], [84.7, 15930.0], [84.8, 15987.0], [84.9, 15987.0], [85.0, 16130.0], [85.1, 16133.0], [85.2, 16154.0], [85.3, 16185.0], [85.4, 16267.0], [85.5, 16308.0], [85.6, 16328.0], [85.7, 16370.0], [85.8, 16395.0], [85.9, 16438.0], [86.0, 16460.0], [86.1, 16484.0], [86.2, 16674.0], [86.3, 16729.0], [86.4, 16759.0], [86.5, 16770.0], [86.6, 16804.0], [86.7, 16831.0], [86.8, 16847.0], [86.9, 16936.0], [87.0, 16939.0], [87.1, 17070.0], [87.2, 17112.0], [87.3, 17149.0], [87.4, 17155.0], [87.5, 17216.0], [87.6, 17226.0], [87.7, 17254.0], [87.8, 17380.0], [87.9, 17498.0], [88.0, 17564.0], [88.1, 17566.0], [88.2, 17645.0], [88.3, 17692.0], [88.4, 17754.0], [88.5, 17794.0], [88.6, 17845.0], [88.7, 17929.0], [88.8, 17992.0], [88.9, 18010.0], [89.0, 18026.0], [89.1, 18140.0], [89.2, 18143.0], [89.3, 18189.0], [89.4, 18201.0], [89.5, 18219.0], [89.6, 18286.0], [89.7, 18302.0], [89.8, 18357.0], [89.9, 18453.0], [90.0, 18538.0], [90.1, 18558.0], [90.2, 18577.0], [90.3, 18604.0], [90.4, 18669.0], [90.5, 18785.0], [90.6, 18788.0], [90.7, 18800.0], [90.8, 18853.0], [90.9, 18892.0], [91.0, 19020.0], [91.1, 19136.0], [91.2, 19241.0], [91.3, 19262.0], [91.4, 19290.0], [91.5, 19313.0], [91.6, 19373.0], [91.7, 19577.0], [91.8, 19581.0], [91.9, 19621.0], [92.0, 19669.0], [92.1, 19732.0], [92.2, 19738.0], [92.3, 19759.0], [92.4, 19953.0], [92.5, 19969.0], [92.6, 19990.0], [92.7, 20024.0], [92.8, 20036.0], [92.9, 20066.0], [93.0, 20093.0], [93.1, 20122.0], [93.2, 20149.0], [93.3, 20237.0], [93.4, 20342.0], [93.5, 20372.0], [93.6, 20381.0], [93.7, 20401.0], [93.8, 20425.0], [93.9, 20622.0], [94.0, 20627.0], [94.1, 20666.0], [94.2, 20680.0], [94.3, 20689.0], [94.4, 20724.0], [94.5, 20813.0], [94.6, 20884.0], [94.7, 20918.0], [94.8, 21081.0], [94.9, 21140.0], [95.0, 21150.0], [95.1, 21162.0], [95.2, 21179.0], [95.3, 21197.0], [95.4, 21199.0], [95.5, 21221.0], [95.6, 21244.0], [95.7, 21330.0], [95.8, 21355.0], [95.9, 21460.0], [96.0, 21488.0], [96.1, 21489.0], [96.2, 21506.0], [96.3, 21536.0], [96.4, 21550.0], [96.5, 21645.0], [96.6, 21695.0], [96.7, 21718.0], [96.8, 21765.0], [96.9, 21821.0], [97.0, 21869.0], [97.1, 21884.0], [97.2, 21929.0], [97.3, 21986.0], [97.4, 22043.0], [97.5, 22096.0], [97.6, 22223.0], [97.7, 22283.0], [97.8, 22377.0], [97.9, 22389.0], [98.0, 22403.0], [98.1, 22462.0], [98.2, 22510.0], [98.3, 22511.0], [98.4, 22674.0], [98.5, 22722.0], [98.6, 22746.0], [98.7, 22893.0], [98.8, 22898.0], [98.9, 22906.0], [99.0, 22915.0], [99.1, 22947.0], [99.2, 23026.0], [99.3, 23062.0], [99.4, 23111.0], [99.5, 23196.0], [99.6, 23209.0], [99.7, 23219.0], [99.8, 23261.0], [99.9, 23392.0]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1200.0, "maxY": 164.0, "series": [{"data": [[1200.0, 10.0], [1300.0, 42.0], [1400.0, 164.0], [1500.0, 131.0], [1600.0, 73.0], [1700.0, 56.0], [1800.0, 99.0], [1900.0, 83.0], [2000.0, 96.0], [2100.0, 40.0], [2200.0, 5.0], [3200.0, 3.0], [3400.0, 3.0], [3500.0, 3.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [4100.0, 1.0], [4500.0, 3.0], [4600.0, 1.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 2.0], [5200.0, 1.0], [5300.0, 2.0], [5400.0, 1.0], [5500.0, 1.0], [15200.0, 1.0], [15300.0, 1.0], [15400.0, 4.0], [15700.0, 6.0], [15600.0, 1.0], [15900.0, 3.0], [16100.0, 4.0], [16200.0, 1.0], [16300.0, 4.0], [17200.0, 3.0], [16400.0, 3.0], [16800.0, 3.0], [16600.0, 1.0], [16900.0, 2.0], [16700.0, 3.0], [17100.0, 3.0], [17000.0, 1.0], [17400.0, 1.0], [17300.0, 1.0], [18200.0, 3.0], [17500.0, 2.0], [17600.0, 2.0], [17700.0, 2.0], [18000.0, 2.0], [17800.0, 1.0], [17900.0, 2.0], [18100.0, 3.0], [18300.0, 2.0], [18400.0, 1.0], [18500.0, 3.0], [18600.0, 2.0], [18800.0, 3.0], [18700.0, 2.0], [19000.0, 1.0], [19200.0, 3.0], [19100.0, 1.0], [19300.0, 2.0], [19600.0, 2.0], [19500.0, 2.0], [19700.0, 3.0], [19900.0, 3.0], [20000.0, 4.0], [20200.0, 1.0], [20300.0, 3.0], [20100.0, 2.0], [20400.0, 2.0], [21300.0, 2.0], [20600.0, 5.0], [20700.0, 1.0], [20800.0, 2.0], [20900.0, 1.0], [21000.0, 1.0], [21100.0, 6.0], [21200.0, 2.0], [21400.0, 3.0], [21500.0, 3.0], [21600.0, 2.0], [21700.0, 2.0], [21800.0, 3.0], [21900.0, 2.0], [22000.0, 2.0], [22200.0, 2.0], [22400.0, 2.0], [22500.0, 2.0], [22300.0, 2.0], [22800.0, 2.0], [22600.0, 1.0], [22700.0, 2.0], [22900.0, 3.0], [23000.0, 2.0], [23100.0, 2.0], [23200.0, 3.0], [23300.0, 1.0]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 166.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 834.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 166.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 834.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.0660000000008, "minX": 1.66981236E12, "maxY": 501.0660000000008, "series": [{"data": [[1.66981236E12, 501.0660000000008]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66981236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1280.0, "minX": 1.0, "maxY": 23392.0, "series": [{"data": [[2.0, 23261.0], [3.0, 23219.0], [4.0, 23196.0], [5.0, 23026.0], [6.0, 23209.0], [7.0, 23111.0], [8.0, 22906.0], [9.0, 23062.0], [10.0, 22947.0], [11.0, 22915.0], [13.0, 22807.5], [14.0, 22746.0], [15.0, 22674.0], [16.0, 22898.0], [17.0, 22403.0], [18.0, 22389.0], [19.0, 22377.0], [20.0, 22510.0], [21.0, 22511.0], [22.0, 22462.0], [23.0, 22096.0], [24.0, 22283.0], [25.0, 22223.0], [26.0, 22043.0], [27.0, 21929.0], [28.0, 21884.0], [29.0, 21821.0], [30.0, 21986.0], [31.0, 21695.0], [33.0, 21869.0], [32.0, 21645.0], [35.0, 21765.0], [34.0, 21536.0], [37.0, 21718.0], [36.0, 21460.0], [39.0, 21550.0], [38.0, 21330.0], [41.0, 21488.0], [40.0, 21506.0], [43.0, 21244.0], [42.0, 21489.0], [45.0, 21179.0], [44.0, 21355.0], [47.0, 21199.0], [46.0, 21162.0], [49.0, 21140.0], [48.0, 21150.0], [51.0, 21197.0], [50.0, 21221.0], [53.0, 20680.0], [52.0, 21081.0], [55.0, 20884.0], [54.0, 20918.0], [57.0, 20724.0], [56.0, 20813.0], [59.0, 20666.0], [58.0, 20689.0], [60.0, 20401.0], [63.0, 20425.0], [62.0, 20624.5], [67.0, 20122.0], [66.0, 20372.0], [65.0, 20149.0], [64.0, 20381.0], [71.0, 20237.0], [70.0, 20342.0], [69.0, 20066.0], [68.0, 20093.0], [75.0, 19953.0], [74.0, 19738.0], [73.0, 20024.0], [72.0, 20036.0], [79.0, 19759.0], [78.0, 19581.0], [77.0, 19969.0], [76.0, 19990.0], [83.0, 19669.0], [82.0, 19621.0], [81.0, 19577.0], [80.0, 19732.0], [87.0, 19262.0], [86.0, 19313.0], [85.0, 19290.0], [84.0, 19373.0], [91.0, 18800.0], [90.0, 19020.0], [89.0, 19241.0], [88.0, 19136.0], [95.0, 18577.0], [94.0, 18892.0], [93.0, 18785.0], [92.0, 18788.0], [99.0, 18453.0], [98.0, 18538.0], [97.0, 18728.5], [103.0, 18286.0], [102.0, 18558.0], [101.0, 18357.0], [100.0, 18669.0], [107.0, 18140.0], [106.0, 18143.0], [105.0, 18302.0], [104.0, 18201.0], [111.0, 17929.0], [110.0, 18189.0], [109.0, 18219.0], [108.0, 17992.0], [115.0, 17754.0], [114.0, 18010.0], [113.0, 18026.0], [112.0, 17845.0], [119.0, 17645.0], [118.0, 17794.0], [117.0, 17566.0], [116.0, 17692.0], [123.0, 17226.0], [122.0, 17498.0], [121.0, 17564.0], [120.0, 17380.0], [127.0, 17216.0], [126.0, 17070.0], [125.0, 17112.0], [124.0, 17149.0], [135.0, 16936.0], [134.0, 16729.0], [133.0, 16759.0], [132.0, 16770.0], [131.0, 16831.0], [130.0, 17155.0], [129.0, 16939.0], [128.0, 17254.0], [143.0, 16308.0], [142.0, 16328.0], [141.0, 16370.0], [140.0, 16460.0], [139.0, 16484.0], [138.0, 16804.0], [137.0, 16847.0], [136.0, 16674.0], [151.0, 15987.0], [150.0, 16133.0], [149.0, 16154.0], [148.0, 16185.0], [147.0, 16267.0], [146.0, 16130.0], [145.0, 16395.0], [144.0, 16438.0], [159.0, 15638.0], [158.0, 15774.0], [157.0, 15756.0], [156.0, 15727.0], [155.0, 15743.0], [154.0, 15744.0], [153.0, 15987.0], [152.0, 15930.0], [167.0, 5546.0], [166.0, 15280.0], [164.0, 15431.0], [163.0, 15476.0], [162.0, 15472.0], [161.0, 15713.0], [160.0, 15443.0], [175.0, 4942.0], [174.0, 4887.0], [173.0, 5059.0], [172.0, 5221.0], [171.0, 5032.0], [170.0, 5326.0], [169.0, 5362.0], [168.0, 5487.0], [183.0, 4573.0], [182.0, 4621.0], [181.0, 4440.0], [180.0, 4732.0], [179.0, 4540.0], [178.0, 4816.0], [177.0, 4706.0], [176.0, 4992.0], [191.0, 3843.0], [190.0, 3913.0], [189.0, 4056.0], [188.0, 3839.0], [187.0, 4251.0], [186.0, 4346.0], [185.0, 4148.0], [184.0, 4502.0], [199.0, 3361.5], [198.0, 3506.0], [197.0, 3453.0], [196.0, 3517.0], [193.0, 3277.0], [192.0, 3610.0], [206.0, 1926.0], [205.0, 2206.0], [204.0, 2078.5], [202.0, 2210.0], [201.0, 3230.0], [200.0, 3496.0], [215.0, 2179.0], [214.0, 1933.5], [212.0, 2170.0], [211.0, 2202.0], [209.0, 2160.3333333333335], [223.0, 2170.0], [221.0, 2062.5], [219.0, 2097.5], [217.0, 1981.0], [231.0, 1813.0], [230.0, 2109.0], [229.0, 2111.0], [228.0, 2097.0], [227.0, 2105.0], [226.0, 2123.0], [225.0, 2167.5], [239.0, 2092.0], [238.0, 2100.0], [237.0, 2091.0], [236.0, 1863.0], [235.0, 2102.0], [234.0, 2037.0], [233.0, 2136.5], [246.0, 2147.5], [244.0, 2132.0], [243.0, 1998.0], [241.0, 2110.5], [254.0, 2089.5], [252.0, 2144.0], [251.0, 2136.5], [249.0, 2103.6666666666665], [270.0, 2076.3333333333335], [268.0, 2122.0], [267.0, 2126.0], [265.0, 2134.0], [259.0, 2131.0], [258.0, 2095.0], [256.0, 2143.0], [275.0, 2089.0], [285.0, 1858.0], [286.0, 1955.0], [284.0, 1765.0], [282.0, 1813.0], [280.0, 1880.0], [279.0, 1882.0], [278.0, 2060.0], [276.0, 2061.8], [274.0, 2107.5], [272.0, 2100.6666666666665], [301.0, 2050.0], [303.0, 2043.5], [300.0, 2051.0], [291.0, 1943.0], [289.0, 1855.0], [288.0, 1898.5], [299.0, 2039.5], [297.0, 1755.0], [296.0, 1867.0], [295.0, 1757.0], [294.0, 1869.0], [293.0, 1759.0], [292.0, 1870.0], [307.0, 2034.0], [318.0, 2084.0], [317.0, 2079.0], [315.0, 2039.0], [314.0, 2086.0], [313.0, 2040.5], [311.0, 2086.0], [310.0, 2016.0], [306.0, 2052.0], [305.0, 2092.0], [304.0, 2055.0], [323.0, 2002.0], [335.0, 2010.0], [334.0, 2026.0], [331.0, 1969.0], [330.0, 2021.0], [328.0, 2033.5], [326.0, 2068.0], [325.0, 2029.5], [322.0, 2080.6666666666665], [321.0, 2077.0], [350.0, 1920.0], [351.0, 1807.0], [349.0, 2043.0], [348.0, 1773.0], [347.0, 1771.5], [345.0, 1988.0], [344.0, 1918.5], [342.0, 2025.5], [338.0, 1923.0], [336.0, 1930.0], [340.0, 1807.0], [366.0, 1984.5], [367.0, 2001.0], [364.0, 1704.0], [355.0, 1803.0], [354.0, 1758.0], [352.0, 1712.0], [363.0, 2005.0], [362.0, 1816.0], [361.0, 1817.0], [360.0, 2001.0], [359.0, 1707.3333333333333], [356.0, 1803.0], [382.0, 2036.0], [383.0, 1994.0], [381.0, 1950.0], [380.0, 1993.0], [379.0, 1952.0], [378.0, 1986.5], [376.0, 1985.0], [375.0, 2002.0], [369.0, 1994.0], [371.0, 1987.0], [370.0, 2031.0], [374.0, 2043.0], [373.0, 1698.0], [372.0, 1998.0], [398.0, 1999.5], [399.0, 1803.0], [396.0, 2026.0], [387.0, 2027.0], [386.0, 2017.0], [385.0, 1954.0], [384.0, 2036.0], [395.0, 2015.0], [394.0, 2027.0], [393.0, 2027.0], [392.0, 2028.0], [391.0, 1969.0], [389.0, 2029.0], [403.0, 1967.0], [414.0, 1965.5], [412.0, 2010.0], [411.0, 1990.0], [408.0, 2001.0], [407.0, 1970.0], [406.0, 2020.0], [405.0, 2011.0], [401.0, 2007.0], [400.0, 2016.0], [419.0, 1938.0], [430.0, 1663.0], [431.0, 1890.0], [429.0, 1943.5], [418.0, 1898.0], [417.0, 1999.0], [427.0, 1934.3333333333333], [424.0, 2001.0], [423.0, 1986.0], [422.0, 1960.0], [421.0, 2005.0], [420.0, 1897.0], [445.0, 1899.0], [444.0, 1926.0], [435.0, 1927.0], [432.0, 1943.0], [443.0, 1934.0], [442.0, 1883.0], [441.0, 1755.0], [440.0, 1925.0], [439.0, 1941.5], [438.0, 1929.0], [436.0, 1758.0], [462.0, 1754.6666666666667], [460.0, 1914.0], [456.0, 1933.5], [454.0, 1834.0], [452.0, 1834.0], [450.0, 1929.5], [448.0, 1788.0], [478.0, 1875.0], [476.0, 1813.0], [465.0, 1684.0], [464.0, 1798.5], [474.0, 1675.0], [473.0, 1676.0], [472.0, 1916.0], [471.0, 1928.0], [470.0, 1679.0], [469.0, 1679.0], [468.0, 1928.0], [494.0, 1711.0], [495.0, 1594.0], [493.0, 1673.0], [492.0, 1673.0], [491.0, 1951.0], [490.0, 1894.0], [489.0, 1716.0], [488.0, 1945.0], [485.0, 1680.0], [480.0, 1908.0], [483.0, 1940.0], [482.0, 1930.5], [508.0, 1765.0], [506.0, 1896.3333333333333], [503.0, 1754.0], [501.0, 1907.0], [500.0, 1893.5], [499.0, 1865.75], [497.0, 1666.5], [541.0, 1852.0], [542.0, 1835.0], [539.0, 1871.0], [538.0, 1860.5], [537.0, 1828.0], [536.0, 1837.0], [525.0, 1874.0], [519.0, 1748.5], [517.0, 1775.3333333333333], [514.0, 1903.0], [513.0, 1883.5], [512.0, 1846.0], [523.0, 1788.75], [534.0, 1833.0], [533.0, 1763.0], [530.0, 1788.3333333333333], [528.0, 1797.3333333333333], [575.0, 1662.25], [570.0, 1674.3333333333333], [550.0, 1812.0], [549.0, 1686.5], [548.0, 1860.5], [545.0, 1739.0], [567.0, 1867.0], [566.0, 1558.6666666666667], [563.0, 1838.0], [562.0, 1534.0], [560.0, 1572.0], [558.0, 1573.0], [556.0, 1681.5], [555.0, 1574.0], [554.0, 1536.0], [552.0, 1613.0], [602.0, 1523.0], [594.0, 1526.0], [604.0, 1750.0], [605.0, 1521.0], [592.0, 1601.0], [603.0, 1750.0], [601.0, 1876.0], [582.0, 1529.0], [581.0, 1529.0], [580.0, 1605.0], [579.0, 1530.0], [578.0, 1600.3333333333333], [576.0, 1606.0], [591.0, 1631.0], [589.0, 1850.0], [588.0, 1528.0], [587.0, 1821.0], [586.0, 1528.0], [584.0, 1733.5], [599.0, 1713.6666666666667], [597.0, 1600.0], [595.0, 1525.5], [638.0, 1703.0], [639.0, 1854.0], [627.0, 1678.5], [625.0, 1765.5], [636.0, 1508.0], [635.0, 1858.0], [634.0, 1737.0], [633.0, 1641.0], [632.0, 1655.5], [614.0, 1832.5], [612.0, 1698.0], [610.0, 1635.6666666666667], [608.0, 1657.0], [623.0, 1513.0], [621.0, 1743.0], [620.0, 1628.0], [619.0, 1808.0], [617.0, 1630.0], [616.0, 1516.0], [630.0, 1510.0], [629.0, 1801.0], [670.0, 1491.0], [671.0, 1536.5], [658.0, 1751.0], [656.0, 1575.3333333333333], [668.0, 1539.0], [666.0, 1588.0], [665.0, 1494.0], [664.0, 1790.0], [653.0, 1501.0], [643.0, 1552.0], [641.0, 1654.0], [646.0, 1788.5], [645.0, 1505.0], [651.0, 1647.5], [649.0, 1676.6666666666667], [663.0, 1496.0], [662.0, 1497.0], [661.0, 1498.0], [660.0, 1692.0], [696.0, 1668.0], [702.0, 1518.0], [703.0, 1761.0], [688.0, 1476.0], [700.0, 1751.0], [699.0, 1473.0], [697.0, 1473.0], [687.0, 1571.0], [673.0, 1534.0], [677.0, 1680.5], [675.0, 1486.0], [679.0, 1483.0], [678.0, 1587.5], [686.0, 1478.0], [685.0, 1775.0], [684.0, 1526.5], [682.0, 1770.0], [681.0, 1481.0], [680.0, 1778.0], [694.0, 1475.0], [693.0, 1521.0], [691.0, 1669.0], [690.0, 1570.0], [729.0, 1542.0], [734.0, 1451.5], [735.0, 1688.0], [721.0, 1545.0], [720.0, 1453.0], [724.0, 1495.0], [722.0, 1745.0], [732.0, 1402.0], [731.0, 1404.0], [730.0, 1500.0], [728.0, 1418.0], [711.0, 1462.0], [709.0, 1463.0], [708.0, 1760.0], [707.0, 1560.0], [706.0, 1515.0], [719.0, 1746.0], [718.0, 1549.0], [717.0, 1753.0], [716.0, 1505.0], [715.0, 1459.0], [714.0, 1750.0], [712.0, 1574.0], [726.0, 1423.0], [725.0, 1430.0], [761.0, 1625.0], [766.0, 1621.0], [767.0, 1623.0], [752.0, 1631.0], [755.0, 1462.0], [754.0, 1631.5], [765.0, 1609.0], [764.0, 1574.5], [762.0, 1611.0], [760.0, 1600.0], [743.0, 1351.0], [742.0, 1641.0], [741.0, 1499.5], [739.0, 1469.0], [738.0, 1359.0], [737.0, 1360.0], [736.0, 1363.0], [750.0, 1472.0], [749.0, 1636.0], [747.0, 1620.5], [745.0, 1348.0], [744.0, 1627.0], [758.0, 1532.5], [756.0, 1610.0], [794.0, 1556.0], [786.0, 1412.0], [797.0, 1573.0], [799.0, 1564.0], [785.0, 1588.0], [784.0, 1561.0], [796.0, 1489.0], [792.0, 1583.0], [775.0, 1613.0], [774.0, 1595.5], [772.0, 1591.0], [771.0, 1572.0], [770.0, 1619.0], [769.0, 1630.0], [782.0, 1593.0], [780.0, 1609.5], [778.0, 1597.0], [777.0, 1619.0], [776.0, 1653.0], [791.0, 1589.6666666666667], [788.0, 1547.0], [787.0, 1586.0], [824.0, 1498.0], [830.0, 1508.0], [831.0, 1508.0], [816.0, 1511.0], [818.0, 1358.0], [817.0, 1500.0], [828.0, 1505.0], [827.0, 1511.5], [826.0, 1517.0], [815.0, 1506.0], [800.0, 1550.0], [803.0, 1463.0], [802.0, 1560.0], [805.0, 1540.0], [804.0, 1556.0], [807.0, 1548.0], [806.0, 1537.0], [814.0, 1530.0], [813.0, 1531.0], [812.0, 1520.0], [811.0, 1534.0], [810.0, 1524.0], [809.0, 1533.0], [808.0, 1545.0], [823.0, 1520.0], [821.0, 1532.0], [820.0, 1525.0], [819.0, 1526.0], [858.0, 1489.0], [850.0, 1485.5], [861.0, 1488.0], [863.0, 1480.0], [848.0, 1487.0], [860.0, 1478.0], [857.0, 1478.5], [838.0, 1507.0], [837.0, 1501.0], [835.0, 1479.0], [834.0, 1487.0], [833.0, 1503.0], [846.0, 1487.0], [845.0, 1349.5], [843.0, 1480.0], [842.0, 1488.0], [841.0, 1497.0], [855.0, 1486.0], [853.0, 1484.0], [851.0, 1496.0], [892.0, 1459.0], [883.0, 1470.0], [895.0, 1457.0], [880.0, 1473.0], [891.0, 1449.0], [889.0, 1432.5], [879.0, 1474.0], [864.0, 1486.0], [867.0, 1459.0], [865.0, 1465.0], [870.0, 1481.0], [869.0, 1481.0], [877.0, 1466.5], [876.0, 1474.0], [874.0, 1476.0], [872.0, 1470.5], [887.0, 1463.0], [886.0, 1466.0], [884.0, 1467.0], [882.0, 1471.0], [881.0, 1456.0], [920.0, 1404.0], [915.0, 1455.0], [925.0, 1457.0], [923.0, 1459.0], [922.0, 1439.0], [911.0, 1440.0], [897.0, 1379.5], [900.0, 1452.0], [899.0, 1465.0], [903.0, 1446.0], [902.0, 1448.0], [910.0, 1482.0], [909.0, 1483.5], [907.0, 1477.0], [906.0, 1465.5], [904.0, 1447.0], [918.0, 1365.0], [917.0, 1465.0], [916.0, 1432.0], [913.0, 1442.0], [956.0, 1420.5], [947.0, 1419.0], [958.0, 1407.5], [944.0, 1423.0], [954.0, 1414.0], [952.0, 1379.0], [943.0, 1425.0], [930.0, 1464.5], [928.0, 1429.6666666666667], [932.0, 1391.0], [931.0, 1460.0], [934.0, 1445.0], [933.0, 1457.0], [942.0, 1429.0], [941.0, 1428.0], [940.0, 1388.0], [939.0, 1424.5], [937.0, 1433.0], [951.0, 1424.0], [950.0, 1424.0], [948.0, 1429.0], [946.0, 1433.0], [945.0, 1431.0], [986.0, 1376.0], [984.0, 1368.6666666666667], [967.0, 1398.5], [965.0, 1400.5], [963.0, 1393.0], [960.0, 1409.0], [982.0, 1374.0], [980.0, 1280.0], [978.0, 1378.0], [977.0, 1388.0], [976.0, 1392.0], [975.0, 1285.0], [974.0, 1376.0], [973.0, 1351.0], [972.0, 1386.0], [971.0, 1394.0], [970.0, 1394.0], [969.0, 1396.5], [1000.0, 1313.4615384615386], [993.0, 1351.5], [1.0, 23392.0]], "isOverall": false, "label": "JDBC Request", "isController": false}, {"data": [[501.0660000000008, 4729.429000000003]], "isOverall": false, "label": "JDBC Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.66981236E12, "maxY": 2633.366666666667, "series": [{"data": [[1.66981236E12, 2633.366666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66981236E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66981236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4729.429000000003, "minX": 1.66981236E12, "maxY": 4729.429000000003, "series": [{"data": [[1.66981236E12, 4729.429000000003]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66981236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3211.0739999999987, "minX": 1.66981236E12, "maxY": 3211.0739999999987, "series": [{"data": [[1.66981236E12, 3211.0739999999987]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66981236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4728.786, "minX": 1.66981236E12, "maxY": 4728.786, "series": [{"data": [[1.66981236E12, 4728.786]], "isOverall": false, "label": "JDBC Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66981236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15259.0, "minX": 1.66981236E12, "maxY": 23392.0, "series": [{"data": [[1.66981236E12, 23392.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66981236E12, 22559.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66981236E12, 23304.230000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66981236E12, 22998.350000000002]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66981236E12, 15259.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66981236E12, 19475.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66981236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1510.0, "minX": 11.0, "maxY": 22159.5, "series": [{"data": [[16.0, 22159.5], [19.0, 18189.0], [20.0, 19251.5], [21.0, 17149.0], [22.0, 21287.0], [23.0, 20342.0], [13.0, 15638.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[326.0, 1961.5], [11.0, 4274.5], [13.0, 4440.0], [473.0, 1510.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 473.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 11.0, "maxY": 22159.5, "series": [{"data": [[16.0, 22159.5], [19.0, 18188.0], [20.0, 19251.5], [21.0, 17149.0], [22.0, 21286.5], [23.0, 20342.0], [13.0, 15638.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[326.0, 0.0], [11.0, 0.0], [13.0, 0.0], [473.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 473.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66981236E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66981236E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66981236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.7666666666666666, "minX": 1.66981236E12, "maxY": 13.9, "series": [{"data": [[1.66981236E12, 2.7666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66981236E12, 13.9]], "isOverall": false, "label": "null 0", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66981236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.7666666666666666, "minX": 1.66981236E12, "maxY": 13.9, "series": [{"data": [[1.66981236E12, 13.9]], "isOverall": false, "label": "JDBC Request-failure", "isController": false}, {"data": [[1.66981236E12, 2.7666666666666666]], "isOverall": false, "label": "JDBC Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66981236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.7666666666666666, "minX": 1.66981236E12, "maxY": 13.9, "series": [{"data": [[1.66981236E12, 2.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66981236E12, 13.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66981236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

